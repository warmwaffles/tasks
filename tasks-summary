#!/bin/bash

set -e

TASKS_DIRECTORY="${TASKS_DIRECTORY:-$HOME/.tasks}"
NOW=$(date +"%F %R")

if [[ ! -f $TASKS_DIRECTORY ]]
then
    mkdir -p $TASKS_DIRECTORY
fi

COLOR_OFF='\e[00m'
COLOR_BLACK='\e[0;30m'
COLOR_RED='\e[0;31m'
COLOR_GREEN='\e[0;32m'
COLOR_YELLOW='\e[0;33m'
COLOR_BLUE='\e[0;34m'
COLOR_PURPLE='\e[0;35m'
COLOR_CYAN='\e[0;36m'
COLOR_WHITE='\e[0;37m'
COLOR_BLACK_BOLD='\e[1;30m'
COLOR_RED_BOLD='\e[1;31m'
COLOR_GREEN_BOLD='\e[1;32m'
COLOR_YELLOW_BOLD='\e[1;33m'
COLOR_BLUE_BOLD='\e[1;34m'
COLOR_PURPLE_BOLD='\e[1;35m'
COLOR_CYAN_BOLD='\e[1;36m'
COLOR_WHITE_BOLD='\e[1;37m'

usage() {
    cat <<TXT
USAGE: tasks summary [OPTIONS]

ALIASES:
    s

Prints out a summary of todays tasks and yesterday's completed tasks.

OPTIONS:

    -h, --help                 Output this help message
    -t, --tags <TAGS>          Only show tasks with the specific tags
    -T, --not-tags <TAGS>      Exclude tasks with the specific tags
    -p, --project <NAMES>      Only show the tasks for the specific projects
    -P, --not-project <NAMES>  Exclude tasks for specific projects
TXT
}

join_by() {
    local IFS="$1";
    shift;
    echo "$*";
}

#
# Extract the completed at date stamp from the message
#
extract_completed_at() {
    perl -pe 's/.*@completed\((.*)\).*/\1/g'
}

#
# Extract the entire message without the ID and leading preamble
#
extract_message() {
    perl -pe 's/\d+ - \[.?\] - (.*)/\1/g'
}

#
# Make all the +tags pretty
#
pretty_tags() {
    perl -pe "s/\\+([\\w-]+)/$COLOR_GREEN+\\1$COLOR_OFF/g"
}

#
# Make all of the @completed tags pretty
#
pretty_completed() {
    perl -pe "s/@(completed\\(.*\\))/$COLOR_CYAN@\\1$COLOR_OFF/g"
}

#
# Make all of the priority tags pretty
#
pretty_priority() {
    perl -pe "s/@(high|low|critical|important)/$COLOR_YELLOW@\\1$COLOR_OFF/g"
}

#
# Make all of the project tags pretty
#
pretty_project() {
    perl -pe "s/(#[\\w-]+)/$COLOR_BLUE\\1$COLOR_OFF/g"
}

#
# Remove the completed tag from a string
#
strip_completed() {
    perl -pe 's/\@completed\(.*\)//g'
}

pretty_message() {
    pretty_tags | pretty_completed | pretty_priority | pretty_project
}

#
# Get a summary of the work you did / plan on doing today and yesterday
#
summary() {
    PARAMS=""

    while (( "$#" )); do
        case "$1" in
            -h|--help)
                usage
                exit 1
                ;;

            -t|--tags)
                if [[ -z $2 ]]
                then
                    echo "You must specify a tag or multiple tags with comma separation"
                    exit 1
                fi

                TAGS=(${2//,/ })
                TAGS=$(join_by '|' ${TAGS[@]})
                TAGS="\\+($TAGS)"
                shift 2
                ;;

            -T|--not-tags)
                if [[ -z $2 ]]
                then
                    echo "You must specify a tag or multiple tags with comma separation"
                    exit 1
                fi

                NOT_TAGS=(${2//,/ })
                NOT_TAGS=$(join_by '|' ${NOT_TAGS[@]})
                NOT_TAGS="\\+($NOT_TAGS)"
                shift 2
                ;;

            -p|--projects)
                if [[ -z $2 ]]
                then
                    echo "You must specify a tag or multiple tags with comma separation"
                    exit 1
                fi

                PROJECTS=(${2//,/ })
                PROJECTS=$(join_by '|' ${PROJECTS[@]})
                PROJECTS="#($PROJECTS)"
                shift 2
                ;;

            -P|--not-projects)
                if [[ -z $2 ]]
                then
                    echo "You must specify a tag or multiple tags with comma separation"
                    exit 1
                fi

                NOT_PROJECTS=(${2//,/ })
                NOT_PROJECTS=$(join_by '|' ${NOT_PROJECTS[@]})
                NOT_PROJECTS="#($NOT_PROJECTS)"
                shift 2
                ;;
            *)
                PARAMS="$PARAMS $1"
                shift
                ;;
        esac
    done

    begin_today=$(date +'%s' --date "00:00 today")
    end_today=$(date +'%s' --date "23:59 today")
    begin_yesterday=$(date +'%s' --date "00:00 yesterday")

    echo "*Yesterday*"

    while read line
    do
        if [[ ! $line =~ '@completed' ]]
        then
            continue
        fi

        COMPLETED_AT=$(echo $line | extract_completed_at)
        COMPLETED_AT=$(date +'%s' --date "$COMPLETED_AT")

        if [[ $COMPLETED_AT -lt $begin_yesterday ]]
        then
            continue
        fi

        if [[ $COMPLETED_AT -gt $begin_today ]]
        then
            continue
        fi

        if [[ ! -z $TAGS ]]
        then
            if [[ ! $line =~ $TAGS ]]
            then
                continue
            fi
        fi

        if [[ ! -z $NOT_TAGS ]]
        then
            if [[ $line =~ $NOT_TAGS ]]
            then
                continue
            fi
        fi

        if [[ ! -z $PROJECTS ]]
        then
            if [[ ! $line =~ $PROJECTS ]]
            then
                continue
            fi
        fi

        if [[ ! -z $NOT_PROJECTS ]]
        then
            if [[ $line =~ $NOT_PROJECTS ]]
            then
                continue
            fi
        fi

        if [[ ! -z $TAGS ]]
        then
            if [[ ! $line =~ $TAGS ]]
            then
                continue
            fi
        fi

        message=$(echo $line | extract_message | strip_completed | pretty_message)
        echo "  • $message"
    done < $TASKS_DIRECTORY/current.log | sort -g

    echo ""
    echo "*Today*"

    while read line
    do
        status="uncompleted"
        if [[ $line =~ '@completed' ]]
        then
            completed_at=$(echo $line | extract_completed_at)
            completed_at=$(date +'%s' --date "$completed_at")
            status="completed"
        fi

        if [[ ! -z $TAGS ]]
        then
            if [[ ! $line =~ $TAGS ]]
            then
                continue
            fi
        fi

        if [[ ! -z $NOT_TAGS ]]
        then
            if [[ $line =~ $NOT_TAGS ]]
            then
                continue
            fi
        fi

        if [[ ! -z $PROJECTS ]]
        then
            if [[ ! $line =~ $PROJECTS ]]
            then
                continue
            fi
        fi

        if [[ ! -z $NOT_PROJECTS ]]
        then
            if [[ $line =~ $NOT_PROJECTS ]]
            then
                continue
            fi
        fi

        if [[ $status = "uncompleted" ]]
        then
            message=$(echo $line | extract_message | pretty_message)
            echo "  • $message"
        else
            if [[ ! -z $completed_at && $completed_at < $end_today && $completed_at > $begin_today ]]
            then
                message=$(echo $line | extract_message | strip_completed | pretty_message)
                echo -e "  • $message"
            fi
        fi
    done < $TASKS_DIRECTORY/current.log | sort -g
}

summary $*
