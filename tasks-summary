#!/bin/bash

set -e

DIRECTORY=$(tasks-home)/$(tasks-which)

if [[ ! -f $DIRECTORY/current.log ]]
then
    touch $DIRECTORY/current.log
fi

NOW=$(date +"%F %R")

COLOR_OFF='\e[00m'
COLOR_BLACK='\e[0;30m'
COLOR_RED='\e[0;31m'
COLOR_GREEN='\e[0;32m'
COLOR_YELLOW='\e[0;33m'
COLOR_BLUE='\e[0;34m'
COLOR_PURPLE='\e[0;35m'
COLOR_CYAN='\e[0;36m'
COLOR_WHITE='\e[0;37m'
COLOR_BLACK_BOLD='\e[1;30m'
COLOR_RED_BOLD='\e[1;31m'
COLOR_GREEN_BOLD='\e[1;32m'
COLOR_YELLOW_BOLD='\e[1;33m'
COLOR_BLUE_BOLD='\e[1;34m'
COLOR_PURPLE_BOLD='\e[1;35m'
COLOR_CYAN_BOLD='\e[1;36m'
COLOR_WHITE_BOLD='\e[1;37m'

YES=0
NO=1

usage() {
    cat <<TXT
USAGE: tasks summary [OPTIONS]

ALIASES:
    s

Prints out a summary of tasks. The default summary is a daily output. You may
specify a weekly or monthly output if desired.

OPTIONS:

    -h, --help                 Output this help message.
    -t, --tags <TAGS>          Only show tasks with the specific tags.
    -T, --not-tags <TAGS>      Exclude tasks with the specific tags.
    -p, --project <NAMES>      Only show the tasks for the specific projects.
    -P, --not-project <NAMES>  Exclude tasks for specific projects.
        --daily                Output tasks in daily standup format today and
                               yesterday.
        --weekly               Output tasks in a weekly overview format.
        --monthly              Output tasks in a monthly overview format.
TXT
}

join_by() {
    local IFS="$1";
    shift;
    echo "$*";
}

#
# Extract the completed at date stamp from the message
#
extract_completed_at() {
    perl -pe 's/.*@completed\((.*)\).*/\1/g'
}

#
# Extract the entire message without the ID and leading preamble
#
extract_message() {
    perl -pe 's/\d+ - \[.?\] - (.*)/\1/g'
}

#
# Make all the +tags pretty
#
pretty_tags() {
    perl -pe "s/\\+([\\w-]+)/$COLOR_GREEN+\\1$COLOR_OFF/g"
}

#
# Make all of the @completed tags pretty
#
pretty_completed() {
    perl -pe "s/@(completed\\(.*\\))/$COLOR_CYAN@\\1$COLOR_OFF/g"
}

#
# Make all of the priority tags pretty
#
pretty_priority() {
    perl -pe "s/@(high|low|critical|important)/$COLOR_YELLOW@\\1$COLOR_OFF/g"
}

#
# Make all of the project tags pretty
#
pretty_project() {
    perl -pe "s/(#[\\w-]+)/$COLOR_BLUE\\1$COLOR_OFF/g"
}

#
# Remove the completed tag from a string
#
strip_completed() {
    perl -pe 's/\@completed\(.*\)//g'
}

pretty_message() {
    pretty_tags | pretty_completed | pretty_priority | pretty_project
}

contains() {
    if [[ "$1" =~ "$2" ]]
    then
        return $YES
    fi

    return $NO
}

daily_summary() {
    local begin_today=$(date +'%s' --date "00:00 today")
    local end_today=$(date +'%s' --date "23:59 today")
    local begin_yesterday=$(date +'%s' --date "00:00 yesterday")
    local completed_at=""

    readarray -t items < $DIRECTORY/current.log

    echo "*Yesterday*"

    for item in "${items[@]}"
    do
        item="$item"
        if [[ ! $item =~ '@completed' ]]
        then
            continue
        fi

        completed_at=$(echo "$item" | extract_completed_at)
        completed_at=$(date +'%s' --date "$completed_at")

        if [[ $completed_at -lt $begin_yesterday ]]
        then
            continue
        fi

        if [[ $completed_at -gt $begin_today ]]
        then
            continue
        fi

        if [[ ! -z $tags ]] && [[ ! $item =~ $tags ]]
        then
            continue
        fi

        if [[ ! -z $not_tags ]] && [[ $item =~ $not_tags ]]
        then
            continue
        fi

        if [[ ! -z $projects ]] && [[ ! $item =~ $projects ]]
        then
            continue
        fi

        if [[ ! -z $not_projects ]] && [[ $item =~ $not_projects ]]
        then
            continue
        fi

        message=$(echo $item | extract_message | strip_completed | pretty_message)
        echo "  ● $message"
    done


    echo ""
    echo "*Today*"

    for item in "${items[@]}"
    do
        item="$item"
        status="uncompleted"
        if [[ $item =~ '@completed' ]]
        then
            completed_at=$(echo "$item" | extract_completed_at)
            completed_at=$(date +'%s' --date "$completed_at")
            status="completed"
        fi

        if [[ ! -z $tags ]] && [[ ! $item =~ $tags ]]
        then
            continue
        fi

        if [[ ! -z $not_tags ]] && [[ $item =~ $not_tags ]]
        then
            continue
        fi

        if [[ ! -z $projects ]] && [[ ! $item =~ $projects ]]
        then
            continue
        fi

        if [[ ! -z $not_projects ]] && [[ $item =~ $not_projects ]]
        then
            continue
        fi

        if [[ $status = "uncompleted" ]]
        then
            message=$(echo $item | extract_message | pretty_message)
            echo "  ○ $message"
            continue
        fi

        if [[ ! -z $completed_at ]] && [[ $completed_at < $end_today && $completed_at > $begin_today ]]
        then
            message=$(echo $item | extract_message | strip_completed | pretty_message)
            echo -e "  ● $message"
        fi
    done
}

weekly_summary() {
    local begin_last_week=$(date +'%s' --date "00:00 7 days ago")
    local begin_today=$(date +'%s' --date "00:00 today")
    local end_of_week=$(date +'%s' --date "00:00 7 days")
    local completed_at=""

    readarray -t items < $DIRECTORY/current.log

    echo "*Last Week*"

    for item in "${items[@]}"
    do
        item="$item"
        if [[ ! $item =~ '@completed' ]]
        then
            continue
        fi

        completed_at=$(echo "$item" | extract_completed_at)
        completed_at=$(date +'%s' --date "$completed_at")

        if [[ $completed_at -lt $begin_last_week ]]
        then
            continue
        fi

        if [[ $completed_at -gt $begin_today ]]
        then
            continue
        fi

        if [[ ! -z $tags ]] && [[ ! $item =~ $tags ]]
        then
            continue
        fi

        if [[ ! -z $not_tags ]] && [[ $item =~ $not_tags ]]
        then
            continue
        fi

        if [[ ! -z $projects ]] && [[ ! $item =~ $projects ]]
        then
            continue
        fi

        if [[ ! -z $not_projects ]] && [[ $item =~ $not_projects ]]
        then
            continue
        fi

        message=$(echo $item | extract_message | strip_completed | pretty_message)
        echo "  ● $message"
    done


    echo ""
    echo "*This Week*"

    for item in "${items[@]}"
    do
        item="$item"
        status="uncompleted"
        if [[ $item =~ '@completed' ]]
        then
            completed_at=$(echo "$item" | extract_completed_at)
            completed_at=$(date +'%s' --date "$completed_at")
            status="completed"
        fi

        if [[ ! -z $tags ]] && [[ ! $item =~ $tags ]]
        then
            continue
        fi

        if [[ ! -z $not_tags ]] && [[ $item =~ $not_tags ]]
        then
            continue
        fi

        if [[ ! -z $projects ]] && [[ ! $item =~ $projects ]]
        then
            continue
        fi

        if [[ ! -z $not_projects ]] && [[ $item =~ $not_projects ]]
        then
            continue
        fi

        if [[ $status = "uncompleted" ]]
        then
            message=$(echo $item | extract_message | pretty_message)
            echo "  ○ $message"
            continue
        fi

        if [[ ! -z $completed_at ]] && [[ $completed_at < $end_of_week && $completed_at > $begin_today ]]
        then
            message=$(echo $item | extract_message | strip_completed | pretty_message)
            echo -e "  ● $message"
        fi
    done
}

#
# Get a summary of the work you did / plan on doing today and yesterday
#
summary() {
    params=""
    format="daily"

    while (( "$#" )); do
        case "$1" in
            -h|--help)
                usage
                exit 1
                ;;

            -t|--tags)
                if [[ -z $2 ]]
                then
                    echo "You must specify a tag or multiple tags with comma separation"
                    exit 1
                fi

                tags=(${2//,/ })
                tags=$(join_by '|' ${tags[@]})
                tags="\\+($tags)"
                shift 2
                ;;

            -T|--not-tags)
                if [[ -z $2 ]]
                then
                    echo "You must specify a tag or multiple tags with comma separation"
                    exit 1
                fi

                not_tags=(${2//,/ })
                not_tags=$(join_by '|' ${not_tags[@]})
                not_tags="\\+($not_tags)"
                shift 2
                ;;

            -p|--projects)
                if [[ -z $2 ]]
                then
                    echo "You must specify a tag or multiple tags with comma separation"
                    exit 1
                fi

                projects=(${2//,/ })
                projects=$(join_by '|' ${projects[@]})
                projects="#($projects)"
                shift 2
                ;;

            -P|--not-projects)
                if [[ -z $2 ]]
                then
                    echo "You must specify a tag or multiple tags with comma separation"
                    exit 1
                fi

                not_projects=(${2//,/ })
                not_projects=$(join_by '|' ${not_projects[@]})
                not_projects="#($not_projects)"
                shift 2
                ;;
            --daily)
                shift
                format="daily"
                ;;
            --weekly)
                shift
                format="weekly"
                ;;
            --monthly)
                shift
                format="monthly"
                ;;
            *)
                params="$params $1"
                shift
                ;;
        esac
    done

    case $format in
        daily)
            daily_summary
            ;;
        weekly)
            weekly_summary
            ;;
        *)
            echo "unknown format type $format"
            ;;
    esac
}

summary $*
